generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  avatar       String?
  coverImage   String?
  password     String
  points       Int           @default(0)
  bio          String?
  role         Role          @default(USER)
  username     String        @unique
  email        String        @unique
  social       Social?       @relation(fields: [socialId], references: [id])
  socialId     String?       @unique
  stats        Stats         @relation(fields: [statsId], references: [id])
  statsId      String        @unique
  achievements Achievement[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Snippet      Snippet[]
  Submission   Submission[]
}

enum Role {
  USER
  ADMIN
}

model Social {
  id       String  @id @default(cuid())
  github   String? @unique
  twitter  String? @unique
  linkedin String? @unique
  User     User?
}

model Stats {
  id            String @id @default(cuid())
  contributions Int    @default(0)
  rank          Int    @default(0)
  problemSolved Int    @default(0)
  User          User?
}

model Achievement {
  id     String   @id @default(cuid())
  title  String
  icon   String
  date   DateTime
  user   User     @relation(fields: [userId], references: [id])
  userId String
}

model CodingProblem {
  id            String     @id @default(uuid())
  title         String
  description   String
  inputFormat   String
  outputFormat  String
  exampleInput  String
  exampleOutput String
  constraints   String
  difficulty    Difficulty
  topic         String[]

  testCases  TestCase[]
  Submission Submission[]
  Solution   Solution[]
  createdAt  DateTime     @default(now())
  // updatedAt  DateTime     @updatedAt

  @@map("coding_problems")
}

model TestCase {
  id             String        @id @default(uuid())
  input          String
  expectedOutput String
  actualOutput   String?
  problemId      String
  problem        CodingProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@map("test_cases")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String?
  language    String
  tags        String[] @default([])
  sourceCode  String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt

  @@map("snippets")
}

model Submission {
  id            String        @id @default(cuid())
  problem       CodingProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId     String
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String
  createdAt     DateTime      @default(now())
  language      String
  status        Boolean       @default(false)
  submittedCode String

  @@map("submissions")
}

model Solution {
  id          String        @id @default(cuid())
  problem     CodingProblem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId   String
  explanation String
  answers     Answer[]
  createdAt   DateTime      @default(now())

  @@map("solutions")
}

model Answer {
  id         String   @id @default(cuid())
  language   String
  code       String
  solution   Solution @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  solutionId String

  @@map("answers")
}
